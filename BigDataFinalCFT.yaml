AWSTemplateFormatVersion: "2010-09-09"
Description: "TEST for S3 infrastructure"
Parameters:
  S3BucketName:
    Type: String
    Default: instagraminput1

Resources:

  MyS3Bucket1:
    Type: AWS::S3::Bucket
    DependsOn: MyLambdaFunctionPermission
    Properties:
      BucketName: !Ref S3BucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt [ MyLambdaFunction, Arn]

  MyS3Bucket1Policy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument: 
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "*"
            Resource: !Sub 'arn:aws:s3:::${MyS3Bucket1}/*'
      Bucket: !Ref MyS3Bucket1

  MyLambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn: MyLambdaFunction
    Properties:
      FunctionName:
        Fn::GetAtt:
          - MyLambdaFunction
          - Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:s3:::${S3BucketName}

  MyS3Bucket2:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: instagramoutput1
            
  MyS3Bucket2Policy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument: 
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "*"
            Resource: !Sub 'arn:aws:s3:::${MyS3Bucket2}/*'
      Bucket: !Ref MyS3Bucket2
  
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: myS3Trigger
      Handler: index.lambda_handler
      Runtime: python3.8
      Role: arn:aws:iam::374710540470:role/LabRole
      Code:
        ZipFile: |
          import json
          import boto3
          def lambda_handler(event, context):
              s3 = boto3.client('s3')
              if event:
                  bucket_name = event['Records'][0]['s3']['bucket']['name']
                  key = event['Records'][0]['s3']['object']['key']
                  if bucket_name == 'instagraminput1':
                      glue = boto3.client('glue')
                      response = glue.start_trigger(Name='StartTrigger1')
                      print(response)
              return {
                  'statusCode': 200,
                  'body': json.dumps('Workflow Triggered')
              }
      Timeout: 60


  GlueJob:
    Type: 'AWS::Glue::Job'   
    Properties:
      Role: 'LabRole'   
      Command:   
        Name: glueetl
        ScriptLocation: !Sub 's3://instagraminput1/normalized_script.py'
      AllocatedCapacity: 5  
      ExecutionProperty:   
        MaxConcurrentRuns: 2  
      Name: 'cleaning-data1'
      GlueVersion: 3.0

  MyCrawler1:
    Type: AWS::Glue::Crawler
    Properties:
      Name: locationcraw111
      Role: arn:aws:iam::374710540470:role/LabRole
      Targets:
        S3Targets:
          - Path: s3://instagramoutput1/locations.parquet
      DatabaseName: demo
      SchemaChangePolicy:
        UpdateBehavior: UPDATE_IN_DATABASE
        DeleteBehavior: DEPRECATE_IN_DATABASE

  MyCrawler2:
    Type: AWS::Glue::Crawler
    Properties:
      Name: postcraw111
      Role: arn:aws:iam::374710540470:role/LabRole
      Targets:
        S3Targets:
          - Path: s3://instagramoutput1/posts.parquet
      DatabaseName: demo
      SchemaChangePolicy:
        UpdateBehavior: UPDATE_IN_DATABASE
        DeleteBehavior: DEPRECATE_IN_DATABASE

  MyCrawler3:
    Type: AWS::Glue::Crawler
    Properties:
      Name: profilecraw111
      Role: arn:aws:iam::374710540470:role/LabRole
      Targets:
        S3Targets:
          - Path: s3://instagramoutput1/profiles.parquet
      DatabaseName: demo
      SchemaChangePolicy:
        UpdateBehavior: UPDATE_IN_DATABASE
        DeleteBehavior: DEPRECATE_IN_DATABASE


  MyWorkflow:
    Type: AWS::Glue::Workflow
    Properties: 
      Description: "workflow create"
      MaxConcurrentRuns: 5
      Name: "myworkflowtest"

  WorkflowStartTrigger:
    Type: AWS::Glue::Trigger
    Properties:
      Name: 'StartTrigger1'
      Type: ON_DEMAND
      Description: 'Trigger for starting the workflow'
      Actions:
        - JobName: !Ref GlueJob
      WorkflowName: !Ref MyWorkflow

  LocationTrigger:
    Type: AWS::Glue::Trigger
    Properties:
      Name: 'LocationJobSuccessfulTrigger'
      Type: CONDITIONAL
      StartOnCreation: TRUE
      Description: 'Trigger to start the crawler'
      Actions:
        - CrawlerName: !Ref MyCrawler1
      Predicate:
        Conditions:
          - LogicalOperator: EQUALS
            JobName: !Ref GlueJob
            State: SUCCEEDED
      WorkflowName: !Ref MyWorkflow

  PostTrigger:
    Type: AWS::Glue::Trigger
    Properties:
      Name: 'PostJobSuccessfulTrigger'
      Type: CONDITIONAL
      StartOnCreation: TRUE
      Description: 'Trigger to start the crawler'
      Actions:
        - CrawlerName: !Ref MyCrawler2
      Predicate:
        Conditions:
          - LogicalOperator: EQUALS
            JobName: !Ref GlueJob
            State: SUCCEEDED
      WorkflowName: !Ref MyWorkflow

  ProfileTrigger:
    Type: AWS::Glue::Trigger
    Properties:
      Name: 'ProfileJobSuccessfulTrigger'
      Type: CONDITIONAL
      StartOnCreation: TRUE
      Description: 'Trigger to start the crawler'
      Actions:
        - CrawlerName: !Ref MyCrawler3
      Predicate:
        Conditions:
          - LogicalOperator: EQUALS
            JobName: !Ref GlueJob
            State: SUCCEEDED
      WorkflowName: !Ref MyWorkflow



